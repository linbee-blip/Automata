{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "FINAL_COEN432_Assignment_2_PART_B_IPYNB.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I_NVpyMfk5oR"
      },
      "source": [
        "Automata Machine\n",
        "###Description\n",
        "Given a randomly generated set of rules, an 8-bit initial state, and an 8-bit goal state, write a GA that finds the set of rules that will transform the initial state to the goal state after some amount of passes.\n",
        "\n",
        "###Instructions\n",
        "An individual is a set of randomly generated rules based off of a 5-bit truth table. \n",
        "\n",
        "Example:\n",
        "\n",
        "Input | Rule\n",
        "--- | ---\n",
        "00000 | 1\n",
        "00001 | 0\n",
        "00010 | 3\n",
        "...   | ...\n",
        "11110 | 2\n",
        "11111 | 2\n",
        "\n",
        "The rules work as follows:\n",
        "\n",
        "\n",
        "> 0 - replace middle value with a 0\n",
        "\n",
        "> 1 - replace middle value with a 1\n",
        "\n",
        "> 2 - delete the middle value\n",
        "\n",
        "> 3 - replicate the middle value\n",
        "\n",
        "You will use a 5-bit sliding window to implement the rules on the initial state. It may dramatically shorten run time if you parallelize the sliding window.\n",
        "\n",
        "###Example: 5-bit Initial State and 3-bit Sliding Window###\n",
        "Input | Rule\n",
        "--- | ---\n",
        "000 | 0\n",
        "001 | 1\n",
        "010 | 2\n",
        "011 | 3\n",
        "100 | 3\n",
        "101 | 2\n",
        "110 | 1\n",
        "111 | 0\n",
        "\n",
        "Initial State: 01000\n",
        "\n",
        "Goal State: 11111\n",
        "\n",
        "Current State = copy(Initial State)\n",
        "\n",
        "Current State: 01000\n",
        "\n",
        "**First Pass**\n",
        "\n",
        "Next State = copy(Current State)\n",
        "\n",
        "Next State: 01000\n",
        "\n",
        "Step | Current State | Sliding Window | Rule | Change to Next State this Pass\n",
        "--- | --- | --- | --- | ---\n",
        "0 | 01000 |  |  |  01000 (note this is a copy of Current State)\n",
        "1 | ***010***00 | 010 | 2 |  0***_***000\n",
        "2 | 0***100***0 | 100 | 3 | 00***0***00\n",
        "3 | 01***000*** | 000 | 0 | 000***0***0\n",
        "4 | ***0***10***00*** | 000 | 0 | 0000***0***\n",
        "5 | ***01***00***0*** | 001 | 1 | ***1***0000\n",
        "\n",
        "**During each pass ONLY change Next State - DO NOT CHANGE THE INITIAL/CURRENT STATE**\n",
        "\n",
        "Update Current State once all passes are completed.\n",
        "\n",
        "Next State: 10000\n",
        "\n",
        "Current State = copy(Next State)\n",
        "\n",
        "Current State: 10000\n",
        "\n",
        "**End of First Pass**\n",
        "\n",
        "\n",
        "\n",
        "It may take multiple passes to get to the goal state. Some rules will you get close to the goal state, but never fully reach it.\n",
        "\n",
        "Population is a JSON file with the desired number(population_size) of individuals. The first and second elements refer to the intial state and goal state respectively.\n",
        "\n",
        "Running the intialize_population function, generates the JSON file - automata-population.json."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D-vpYgxFiyvW"
      },
      "source": [
        "# Supporting Codes\n",
        "Below are the supporting codes necessary to generate the initial state, goal state, and initial population\n",
        "\n",
        "**Whenever you open the notebook just run the below codes once**.\n",
        "\n",
        "After running them once all the functions can be reused anywhere in the notebook."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "URKf5dPvitYD"
      },
      "source": [
        "## Importing all the packages\n",
        "import numpy as np\n",
        "import random\n",
        "import json"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_b3v3OJSxize"
      },
      "source": [
        "################################################################################\n",
        "#\n",
        "#   Initializes the population of candidates with a size of population_size. \n",
        "#   Also initializes your 8-bit initial_state and your 8-bit goal_state.\n",
        "#\n",
        "#   Parameters:\n",
        "#   population_size - an integer defining how many rules tables to generate\n",
        "#\n",
        "################################################################################\n",
        "def initialize_population(population_size=3):\n",
        "    new_population = []\n",
        "    random_truth_table = []\n",
        "\n",
        "    initial_state = format(np.random.randint(256), 'b')\n",
        "    goal_state = format(np.random.randint(256), 'b')\n",
        "\n",
        "    while len(initial_state) != 8:\n",
        "      initial_state = \"0\" + initial_state\n",
        "\n",
        "    while len(goal_state) != 8:\n",
        "      goal_state = \"0\" + goal_state\n",
        "\n",
        "    while np.array_equal(initial_state, goal_state):\n",
        "      goal_state = np.random.randint(2,size=(8,))\n",
        "\n",
        "    new_population.append({\"Initial State\": str(initial_state)})\n",
        "    new_population.append({\"Goal State\": str(goal_state)})\n",
        "\n",
        "    for individual in range(population_size):\n",
        "      random_truth_table= list()\n",
        "      for bit in range(32):\n",
        "        key = format(bit, 'b')\n",
        "        while len(key) != 5:\n",
        "          key = \"0\" + key\n",
        "        random_truth_table.append({key: np.random.randint(4)})\n",
        "      new_population.append(random_truth_table)\n",
        "    \n",
        "    with open(\"automata-population.json\", 'w') as o:\n",
        "      o.write(json.dumps(new_population))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lC2ykryqnmT2"
      },
      "source": [
        "## Generating Initial Population\n",
        "\n",
        "After running all the codes above once, Use the function **initialize_population(population_size)** to generate a new initial state, goal state, and set of rules tables.\n",
        "\n",
        "One JSON file is generated: automata-population.json.\n",
        "\n",
        "Download this file and use it as need."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "urSpe8Yk1b6a"
      },
      "source": [
        "initialize_population(population_size = 5)\n",
        "\n",
        "with open(\"automata-population.json\",'r') as f:\n",
        "  population = json.loads(f.read());\n",
        "\n",
        "initial_state = population[0]['Initial State']\n",
        "goal_state = population[1]['Goal State']\n",
        "\n",
        "current_state = initial_state"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QkPRMYjgfidL"
      },
      "source": [
        "# Visualizing a Population\n",
        "\n",
        "To visualize your population, use the function print_population().\n",
        "\n",
        "If you have modified the population while running your GA, make sure it matches the same format as the initial_population. Refer to initialize_population for the format.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AJiL0qZmjd0m"
      },
      "source": [
        "################################################################################\n",
        "#\n",
        "#   Prints the passed in population population\n",
        "#\n",
        "#   Parameters:\n",
        "#   population_json - json object containing the population to print\n",
        "#\n",
        "################################################################################\n",
        "def print_population(population_json):\n",
        "  json_obj = json.loads(population_json)\n",
        "\n",
        "  for individual in range(len(population)):\n",
        "    if individual < 2:\n",
        "      print(str(population[individual]))\n",
        "    else:\n",
        "      print(population[individual])\n",
        "      #print(\"Invididual \" + str(individual - 1) + \": \" + str(population[individual]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "abHeqteO5G9P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1c2eb4d1-72a2-455f-8c29-9f834b084035"
      },
      "source": [
        "print_population(json.dumps(population))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Initial State': '01110011'}\n",
            "{'Goal State': '10001000'}\n",
            "[{'00000': 1}, {'00001': 3}, {'00010': 2}, {'00011': 2}, {'00100': 2}, {'00101': 1}, {'00110': 3}, {'00111': 1}, {'01000': 2}, {'01001': 3}, {'01010': 2}, {'01011': 0}, {'01100': 0}, {'01101': 3}, {'01110': 3}, {'01111': 0}, {'10000': 3}, {'10001': 0}, {'10010': 0}, {'10011': 2}, {'10100': 0}, {'10101': 0}, {'10110': 3}, {'10111': 1}, {'11000': 0}, {'11001': 3}, {'11010': 1}, {'11011': 3}, {'11100': 0}, {'11101': 1}, {'11110': 2}, {'11111': 1}]\n",
            "[{'00000': 0}, {'00001': 1}, {'00010': 1}, {'00011': 2}, {'00100': 1}, {'00101': 1}, {'00110': 2}, {'00111': 2}, {'01000': 0}, {'01001': 0}, {'01010': 2}, {'01011': 1}, {'01100': 2}, {'01101': 0}, {'01110': 3}, {'01111': 2}, {'10000': 2}, {'10001': 2}, {'10010': 1}, {'10011': 1}, {'10100': 2}, {'10101': 0}, {'10110': 1}, {'10111': 3}, {'11000': 2}, {'11001': 0}, {'11010': 0}, {'11011': 1}, {'11100': 1}, {'11101': 2}, {'11110': 2}, {'11111': 2}]\n",
            "[{'00000': 1}, {'00001': 3}, {'00010': 3}, {'00011': 1}, {'00100': 1}, {'00101': 2}, {'00110': 1}, {'00111': 3}, {'01000': 3}, {'01001': 3}, {'01010': 0}, {'01011': 3}, {'01100': 0}, {'01101': 3}, {'01110': 0}, {'01111': 0}, {'10000': 0}, {'10001': 3}, {'10010': 1}, {'10011': 0}, {'10100': 0}, {'10101': 1}, {'10110': 1}, {'10111': 3}, {'11000': 0}, {'11001': 2}, {'11010': 1}, {'11011': 1}, {'11100': 3}, {'11101': 1}, {'11110': 0}, {'11111': 1}]\n",
            "[{'00000': 2}, {'00001': 0}, {'00010': 0}, {'00011': 0}, {'00100': 0}, {'00101': 3}, {'00110': 3}, {'00111': 0}, {'01000': 3}, {'01001': 2}, {'01010': 3}, {'01011': 0}, {'01100': 3}, {'01101': 0}, {'01110': 2}, {'01111': 2}, {'10000': 2}, {'10001': 2}, {'10010': 1}, {'10011': 3}, {'10100': 2}, {'10101': 1}, {'10110': 1}, {'10111': 0}, {'11000': 2}, {'11001': 2}, {'11010': 0}, {'11011': 0}, {'11100': 0}, {'11101': 0}, {'11110': 3}, {'11111': 2}]\n",
            "[{'00000': 0}, {'00001': 1}, {'00010': 2}, {'00011': 3}, {'00100': 1}, {'00101': 1}, {'00110': 2}, {'00111': 3}, {'01000': 3}, {'01001': 3}, {'01010': 3}, {'01011': 0}, {'01100': 1}, {'01101': 0}, {'01110': 1}, {'01111': 1}, {'10000': 2}, {'10001': 3}, {'10010': 1}, {'10011': 1}, {'10100': 0}, {'10101': 0}, {'10110': 2}, {'10111': 0}, {'11000': 3}, {'11001': 3}, {'11010': 3}, {'11011': 3}, {'11100': 3}, {'11101': 1}, {'11110': 3}, {'11111': 3}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eDQJwCdB2F-G"
      },
      "source": [
        "# Fitness Evaluation\n",
        "\n",
        "Fitness of an individual is calculated using Minimum Edit Distance (MED). The more deletes, inserts, and substitutions required to convert the final state to the goal state, the worse the fitness. A lower fitness value is better.\n",
        "\n",
        "A sample of the fitness evaluation(written in python) is shared, please refer to the function calculate_fitness().\n",
        "\n",
        "If you want to understand how this fitness function works, please refer to:\n",
        "[Minimum Edit Distance (MED)](https://archive.org/details/31DefiningMinimumEditDistanceStanfordNLPProfessorDanJurafskyChrisManning/3+-+2+-+Computing+Minimum+Edit+Distance+-+Stanford+NLP+-+Professor+Dan+Jurafsky+%26+Chris+Manning.mp4)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4_rc7BpojW-d"
      },
      "source": [
        "################################################################################\n",
        "#\n",
        "#   Calculates the Minimum Edit Distance (MED) between two strings using dynamic\n",
        "#   programming. The lower the value, the better.\n",
        "#\n",
        "#   Parameters:\n",
        "#   final_state - the result of applying your GA strategy on the initial_state\n",
        "#   goal_state - the state that you are aiming to change the initial_state into\n",
        "#\n",
        "#   Returns:\n",
        "#   an integer corresponding to the fitness of your final_state vs goal_state\n",
        "#\n",
        "################################################################################\n",
        "def calculate_fitness(final_state, goal_state):\n",
        "  fitness_table = np.zeros((len(final_state) + 1 , len(goal_state) + 1), dtype=int)\n",
        "\n",
        "  for row in range(len(final_state)+1):\n",
        "    fitness_table[row][0] = row\n",
        "  for col in range(len(goal_state)+1):\n",
        "    fitness_table[0][col] = col\n",
        "\n",
        "  for row in range(len(final_state)+1):\n",
        "    for col in range(len(goal_state)+1):\n",
        "      if row != 0 and col != 0:  \n",
        "        if final_state[row-1] == goal_state[col-1]:\n",
        "          fitness_table[row][col] = fitness_table[row-1][col-1]\n",
        "        else:\n",
        "            fitness_table[row][col] = min(fitness_table[row-1][col] + 1,\n",
        "                                          fitness_table[row][col-1] + 1,\n",
        "                                          fitness_table[row-1][col-1] + 2\n",
        "            )\n",
        "  return fitness_table[len(final_state)][len(goal_state)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HOS4zzB72PVF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "32d273be-9cbf-4a31-9949-02d5652013fc"
      },
      "source": [
        "calculate_fitness(current_state, goal_state)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "maxLbVOHKgTN"
      },
      "source": [
        "# Solution"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yGwL_WD8Kjf7"
      },
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jq80_HmNKl_O"
      },
      "source": [
        "individuals = [{list(population[i][j].keys())[0]: list(population[i][j].values())[0] for j in range(32)} for i in range(2,len(population))]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8kecJuemKn8F"
      },
      "source": [
        "N = len(population[0]['Initial State'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yZV1w4vNKpkr"
      },
      "source": [
        "cyclic = np.array(list(np.arange(N))*2)\n",
        "cyclic_indices = []\n",
        "for i in range(N):\n",
        "  cyclic_indices.append(cyclic[i:i+5])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pkjwE4C6KrPC"
      },
      "source": [
        "def apply_rules(current_state, individual):\n",
        "  next_state = current_state\n",
        "  for i in range(len(cyclic_indices)):\n",
        "    pass_pattern = \"\".join([current_state[j] for j in cyclic_indices[i]])\n",
        "    try:\n",
        "      rule_id = individual[pass_pattern]\n",
        "      if rule_id == 0:\n",
        "        temp = list(next_state)\n",
        "        temp[cyclic_indices[i][2]] = '0'\n",
        "        next_state = ''.join(temp)\n",
        "      elif rule_id == 1:\n",
        "        temp = list(next_state)\n",
        "        temp[cyclic_indices[i][2]] = '1'\n",
        "        next_state = ''.join(temp)\n",
        "      elif rule_id == 2:\n",
        "        temp = list(next_state)\n",
        "        temp[cyclic_indices[i][2]] = '_'\n",
        "        next_state = ''.join(temp)\n",
        "      elif rule_id == 3:\n",
        "        temp = list(next_state)\n",
        "        val = temp[cyclic_indices[i][2]]\n",
        "        for j in range(5):\n",
        "          temp[cyclic_indices[i][j]] = val\n",
        "        next_state = ''.join(temp)\n",
        "    except:\n",
        "      continue\n",
        "  return next_state"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wTw8TYxFKt0l"
      },
      "source": [
        "def evaluate_passes(current_state, individual, num_passes):\n",
        "  #print(current_state)\n",
        "  for i in range(num_passes):\n",
        "    next_state = apply_rules(current_state, individual)\n",
        "    current_state = next_state\n",
        "  #print(next_state)\n",
        "  return next_state"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3LLDzucFKwGI"
      },
      "source": [
        "def parent_selection(individuals, num_parent):\n",
        "  fitness_values = []\n",
        "  for i in range(len(individuals)):\n",
        "    individual = individuals[i]\n",
        "    final_state = evaluate_passes(initial_state, individual, num_passes)\n",
        "    fitness = calculate_fitness(final_state, goal_state)\n",
        "    fitness_values.append(fitness)\n",
        "  fitness_values = np.array(fitness_values)\n",
        "  probs = fitness_values/np.sum(fitness_values)\n",
        "  parents_indices = np.random.choice(np.arange(len(individuals)), num_parents, replace=False, p=probs)\n",
        "  parents = [individuals[i] for i in parents_indices]\n",
        "  return parents, fitness_values"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZFf4ToBfKxpj"
      },
      "source": [
        "def crossover(parents):\n",
        "  num_offsprings = int(len(parents)/2)\n",
        "  offsprings = []\n",
        "  for i in range(num_offsprings):\n",
        "    parent1 = parents[i]\n",
        "    parent2 = parents[i+num_offsprings]\n",
        "    parent1_rules = np.array(list(parent1.values()))\n",
        "    parent2_rules = np.array(list(parent2.values()))\n",
        "    crossover_point = 16\n",
        "    if np.random.uniform(0,1) > 0.5:\n",
        "      offspring_rules = parent1_rules.copy()\n",
        "      offspring_rules[crossover_point:] = parent2_rules[crossover_point:]\n",
        "    else:\n",
        "      offspring_rules = parent2_rules.copy()\n",
        "      offspring_rules[crossover_point:] = parent1_rules[crossover_point:]\n",
        "    offspring = {list(parent1.keys())[j]: offspring_rules[j] for j in range(32)}\n",
        "    offsprings.append(offspring)\n",
        "  return offsprings"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ws_DMoqFKzo3"
      },
      "source": [
        "def mutation(offsprings):\n",
        "  num_offsprings = len(offsprings)\n",
        "  for i in range(num_offsprings):\n",
        "    if np.random.uniform(0,1) > 0.5:\n",
        "      for j in range(32):\n",
        "        if np.random.uniform(0,1) > 0.5:\n",
        "          key = list(offsprings[i].keys())[j]\n",
        "          offsprings[i][key] = np.random.choice([0,1,2,3])\n",
        "  return offsprings"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OlXNdTA3K1uH"
      },
      "source": [
        "def survivor_selection(individuals, mutated_offsprings):\n",
        "  fitness_values = []\n",
        "  for i in range(len(individuals)):\n",
        "    individual = individuals[i]\n",
        "    final_state = evaluate_passes(initial_state, individual, num_passes)\n",
        "    fitness = calculate_fitness(final_state, goal_state)\n",
        "    fitness_values.append(fitness)\n",
        "  fitness_values = np.array(fitness_values)\n",
        "  indices = np.argsort(-fitness_values)[0:len(mutated_offsprings)]\n",
        "  for index in range(len(indices)):\n",
        "    individuals[indices[index]] = mutated_offsprings[index]\n",
        "  return individuals"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5Cp7k9PBK3kW"
      },
      "source": [
        "def fittest(individuals):\n",
        "  fitness_values = []\n",
        "  for i in range(len(individuals)):\n",
        "    individual = individuals[i]\n",
        "    final_state = evaluate_passes(initial_state, individual, num_passes)\n",
        "    fitness = calculate_fitness(final_state, goal_state)\n",
        "    fitness_values.append(fitness)\n",
        "  fitness_values = np.array(fitness_values)\n",
        "  return min(fitness_values), individuals[np.argmin(fitness_values)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cULZ8mzaK5Dx"
      },
      "source": [
        "#reading population\n",
        "initialize_population(population_size = 100)\n",
        "with open(\"automata-population.json\",'r') as f:\n",
        "  population = json.loads(f.read());\n",
        "initial_state = population[0]['Initial State']\n",
        "goal_state = population[1]['Goal State']\n",
        "individuals = [{list(population[i][j].keys())[0]: list(population[i][j].values())[0] \\\n",
        "                for j in range(32)} for i in range(2,len(population))]\n",
        "\n",
        "\n",
        "num_generations = 100\n",
        "num_parents = 60\n",
        "num_passes = 100\n",
        "fitness_values = []\n",
        "for generation in range(num_generations):\n",
        "  parents, fitness = parent_selection(individuals, num_parents)\n",
        "  offsprings = crossover(parents)\n",
        "  mutated_offsprings = mutation(offsprings)\n",
        "  individuals = survivor_selection(individuals, mutated_offsprings)\n",
        "  fitness_val, fittest_individual = fittest(individuals)\n",
        "  fitness_values.append(fitness_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "4j8GQ0hWK7Yz",
        "outputId": "93ffdc53-b8e1-4bf8-f77e-b8ced3bd974c"
      },
      "source": [
        "plt.plot(fitness_values, 'b-')\n",
        "plt.grid(True)\n",
        "plt.xlabel('Generation')\n",
        "plt.ylabel('Minimum edit distance')\n",
        "plt.title('Fitness value over time')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ihLjLFamK_FH",
        "outputId": "ef6f9b96-64e1-4bc1-d59e-93e9371cf46a"
      },
      "source": [
        "fittest_individual"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'00000': 1,\n",
              " '00001': 1,\n",
              " '00010': 3,\n",
              " '00011': 3,\n",
              " '00100': 1,\n",
              " '00101': 3,\n",
              " '00110': 1,\n",
              " '00111': 3,\n",
              " '01000': 3,\n",
              " '01001': 0,\n",
              " '01010': 2,\n",
              " '01011': 3,\n",
              " '01100': 2,\n",
              " '01101': 1,\n",
              " '01110': 1,\n",
              " '01111': 2,\n",
              " '10000': 1,\n",
              " '10001': 1,\n",
              " '10010': 2,\n",
              " '10011': 3,\n",
              " '10100': 1,\n",
              " '10101': 3,\n",
              " '10110': 0,\n",
              " '10111': 1,\n",
              " '11000': 0,\n",
              " '11001': 2,\n",
              " '11010': 1,\n",
              " '11011': 0,\n",
              " '11100': 1,\n",
              " '11101': 3,\n",
              " '11110': 0,\n",
              " '11111': 0}"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "IVld_FHXLB03",
        "outputId": "0084ddfa-3c60-429a-db49-821bfa144ab0"
      },
      "source": [
        "initial_state"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'00011100'"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "O4SVf2RBLD7g",
        "outputId": "5d80658d-3959-46d8-f50c-335da2bbc1b9"
      },
      "source": [
        "evaluate_passes(initial_state, fittest_individual, num_passes)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'11001101'"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "0ihers4XLFak",
        "outputId": "d3ba15c9-776a-443e-beb8-325ce58bb2d4"
      },
      "source": [
        "goal_state"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'10010101'"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WntymH8BLG5L"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}